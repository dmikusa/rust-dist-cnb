// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	postal "github.com/paketo-buildpacks/packit/postal"
	mock "github.com/stretchr/testify/mock"
)

// DependencyService is an autogenerated mock type for the DependencyService type
type DependencyService struct {
	mock.Mock
}

// Install provides a mock function with given fields: dependency, cnbPath, layerPath
func (_m *DependencyService) Install(dependency postal.Dependency, cnbPath string, layerPath string) error {
	ret := _m.Called(dependency, cnbPath, layerPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(postal.Dependency, string, string) error); ok {
		r0 = rf(dependency, cnbPath, layerPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resolve provides a mock function with given fields: path, name, version, stack
func (_m *DependencyService) Resolve(path string, name string, version string, stack string) (postal.Dependency, error) {
	ret := _m.Called(path, name, version, stack)

	var r0 postal.Dependency
	if rf, ok := ret.Get(0).(func(string, string, string, string) postal.Dependency); ok {
		r0 = rf(path, name, version, stack)
	} else {
		r0 = ret.Get(0).(postal.Dependency)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(path, name, version, stack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
